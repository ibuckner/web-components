/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface NelExpandItem {
    /**
    * Is element disabled
    */
    'disabled': boolean;
    /**
    * If element in open state
    */
    'open': boolean;
    /**
    * Text mask
    */
    'size': number;
  }
  interface NelItemCollection {
    /**
    * Horizontal alignment of items in collection
    */
    'align': "horizontal" | "vertical";
    'clear': () => Promise<boolean>;
    /**
    * Declare if element is disabled
    */
    'disabled': boolean;
    /**
    * Set whether collection can be resized
    */
    'resizable': boolean;
    /**
    * Set whether collection is sorted (alphabetically)
    */
    'sortable': boolean;
  }
  interface NelListItem {
    /**
    * List item color
    */
    'color': string;
    /**
    * Set whether element can be deleted
    */
    'deletable': boolean;
    'delete': () => Promise<boolean>;
    /**
    * Declare if element is disabled
    */
    'disabled': boolean;
    /**
    * Set whether element can be selected
    */
    'selectable': boolean;
  }
  interface NelModalView {
    /**
    * Set the modal alignment
    */
    'alignment': "bottom" | "center" | "top";
    /**
    * Is the modal view open or closed?
    */
    'open': boolean;
  }
  interface NelNetworkConnection {
    /**
    * If browser can access network resources
    */
    'available': boolean;
    /**
    * Is element disabled
    */
    'disabled': boolean;
  }
  interface NelTextInput {
    /**
    * Declare if element is disabled
    */
    'disabled': boolean;
    /**
    * Text mask
    */
    'mask': string;
    /**
    * Maximum length
    */
    'maxlength': number;
    /**
    * Minimum length
    */
    'minlength': number;
    /**
    * Text pattern
    */
    'pattern': string;
    /**
    * Text placeholder
    */
    'placeholder': string;
    /**
    * Text value
    */
    'value': string;
  }
  interface NelTextTag {
    /**
    * Main color
    */
    'color': string;
    /**
    * Declare if tag responds to delete/backspace keys
    */
    'deletable': boolean;
    /**
    * Declare if tag is disabled
    */
    'disabled': boolean;
    /**
    * Text label
    */
    'label': string;
    /**
    * Declare if tag can be selected
    */
    'selectable': boolean;
  }
}

declare global {


  interface HTMLNelExpandItemElement extends Components.NelExpandItem, HTMLStencilElement {}
  var HTMLNelExpandItemElement: {
    prototype: HTMLNelExpandItemElement;
    new (): HTMLNelExpandItemElement;
  };

  interface HTMLNelItemCollectionElement extends Components.NelItemCollection, HTMLStencilElement {}
  var HTMLNelItemCollectionElement: {
    prototype: HTMLNelItemCollectionElement;
    new (): HTMLNelItemCollectionElement;
  };

  interface HTMLNelListItemElement extends Components.NelListItem, HTMLStencilElement {}
  var HTMLNelListItemElement: {
    prototype: HTMLNelListItemElement;
    new (): HTMLNelListItemElement;
  };

  interface HTMLNelModalViewElement extends Components.NelModalView, HTMLStencilElement {}
  var HTMLNelModalViewElement: {
    prototype: HTMLNelModalViewElement;
    new (): HTMLNelModalViewElement;
  };

  interface HTMLNelNetworkConnectionElement extends Components.NelNetworkConnection, HTMLStencilElement {}
  var HTMLNelNetworkConnectionElement: {
    prototype: HTMLNelNetworkConnectionElement;
    new (): HTMLNelNetworkConnectionElement;
  };

  interface HTMLNelTextInputElement extends Components.NelTextInput, HTMLStencilElement {}
  var HTMLNelTextInputElement: {
    prototype: HTMLNelTextInputElement;
    new (): HTMLNelTextInputElement;
  };

  interface HTMLNelTextTagElement extends Components.NelTextTag, HTMLStencilElement {}
  var HTMLNelTextTagElement: {
    prototype: HTMLNelTextTagElement;
    new (): HTMLNelTextTagElement;
  };
  interface HTMLElementTagNameMap {
    'nel-expand-item': HTMLNelExpandItemElement;
    'nel-item-collection': HTMLNelItemCollectionElement;
    'nel-list-item': HTMLNelListItemElement;
    'nel-modal-view': HTMLNelModalViewElement;
    'nel-network-connection': HTMLNelNetworkConnectionElement;
    'nel-text-input': HTMLNelTextInputElement;
    'nel-text-tag': HTMLNelTextTagElement;
  }
}

declare namespace LocalJSX {
  interface NelExpandItem extends JSXBase.HTMLAttributes<HTMLNelExpandItemElement> {
    /**
    * Is element disabled
    */
    'disabled'?: boolean;
    /**
    * If element in open state
    */
    'open'?: boolean;
    /**
    * Text mask
    */
    'size'?: number;
  }
  interface NelItemCollection extends JSXBase.HTMLAttributes<HTMLNelItemCollectionElement> {
    /**
    * Horizontal alignment of items in collection
    */
    'align'?: "horizontal" | "vertical";
    /**
    * Declare if element is disabled
    */
    'disabled'?: boolean;
    'onErased'?: (event: CustomEvent<any>) => void;
    'onSorted'?: (event: CustomEvent<any>) => void;
    /**
    * Set whether collection can be resized
    */
    'resizable'?: boolean;
    /**
    * Set whether collection is sorted (alphabetically)
    */
    'sortable'?: boolean;
  }
  interface NelListItem extends JSXBase.HTMLAttributes<HTMLNelListItemElement> {
    /**
    * List item color
    */
    'color'?: string;
    /**
    * Set whether element can be deleted
    */
    'deletable'?: boolean;
    /**
    * Declare if element is disabled
    */
    'disabled'?: boolean;
    'onDeleted'?: (event: CustomEvent<any>) => void;
    'onDeleting'?: (event: CustomEvent<any>) => void;
    'onSelected'?: (event: CustomEvent<any>) => void;
    /**
    * Set whether element can be selected
    */
    'selectable'?: boolean;
  }
  interface NelModalView extends JSXBase.HTMLAttributes<HTMLNelModalViewElement> {
    /**
    * Set the modal alignment
    */
    'alignment'?: "bottom" | "center" | "top";
    /**
    * Is the modal view open or closed?
    */
    'open'?: boolean;
  }
  interface NelNetworkConnection extends JSXBase.HTMLAttributes<HTMLNelNetworkConnectionElement> {
    /**
    * If browser can access network resources
    */
    'available'?: boolean;
    /**
    * Is element disabled
    */
    'disabled'?: boolean;
  }
  interface NelTextInput extends JSXBase.HTMLAttributes<HTMLNelTextInputElement> {
    /**
    * Declare if element is disabled
    */
    'disabled'?: boolean;
    /**
    * Text mask
    */
    'mask'?: string;
    /**
    * Maximum length
    */
    'maxlength'?: number;
    /**
    * Minimum length
    */
    'minlength'?: number;
    /**
    * Text pattern
    */
    'pattern'?: string;
    /**
    * Text placeholder
    */
    'placeholder'?: string;
    /**
    * Text value
    */
    'value'?: string;
  }
  interface NelTextTag extends JSXBase.HTMLAttributes<HTMLNelTextTagElement> {
    /**
    * Main color
    */
    'color'?: string;
    /**
    * Declare if tag responds to delete/backspace keys
    */
    'deletable'?: boolean;
    /**
    * Declare if tag is disabled
    */
    'disabled'?: boolean;
    /**
    * Text label
    */
    'label'?: string;
    'onDeleted'?: (event: CustomEvent<any>) => void;
    'onDeleting'?: (event: CustomEvent<any>) => void;
    'onSelected'?: (event: CustomEvent<any>) => void;
    /**
    * Declare if tag can be selected
    */
    'selectable'?: boolean;
  }

  interface IntrinsicElements {
    'nel-expand-item': NelExpandItem;
    'nel-item-collection': NelItemCollection;
    'nel-list-item': NelListItem;
    'nel-modal-view': NelModalView;
    'nel-network-connection': NelNetworkConnection;
    'nel-text-input': NelTextInput;
    'nel-text-tag': NelTextTag;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


